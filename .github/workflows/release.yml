# This workflow tests and releases a new version of the package, then publishes it to PyPi and the
# octue/octue-sdk-python Docker Hub repository.

name: Release

# Only trigger when a pull request into main branch is merged.
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  run-tests:
    if: "github.event.pull_request.merged == true"
    runs-on: ${{ matrix.os }}
    env:
      USING_COVERAGE: '3.8'
    strategy:
      matrix:
        python: [ 3.8 ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    permissions:
      id-token: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Check pyproject.toml file
        run: poetry check

      - name: Install tox
        run: pip install tox

      - name: Authenticate with Google Cloud
        id: auth
        uses: google-github-actions/auth@v0.6.0
        with:
          # NOTE: If setting create_credentials_file=true, .dockerignore file must include `gha-creds-*.json` to avoid baking these credentials into build
          create_credentials_file: true
          workload_identity_provider: 'projects/481503880524/locations/global/workloadIdentityPools/github-actions-pool-2/providers/github-actions-provider-2'
          service_account: 'gha-sdk-python@octue-amy.iam.gserviceaccount.com'

      - name: Run tests
        env:
          TEST_PROJECT_NAME: ${{ secrets.TEST_PROJECT_NAME }}
          GOOGLE_CLOUD_PROJECT: ${{ secrets.TEST_PROJECT_NAME }}
        run: tox -vv -e py

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
    - uses: actions/checkout@v3

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Get package version
      run: echo "PACKAGE_VERSION=$(poetry version -s)" >> $GITHUB_ENV

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, no need to create your own.
      with:
        tag_name: ${{ env.PACKAGE_VERSION }}
        release_name: ${{ github.event.pull_request.title }}
        body: ${{ github.event.pull_request.body }}
        draft: false
        prerelease: false

  publish:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build and publish latest package to PyPI
        uses: JRubics/poetry-publish@v1.10
        with:
          python_version: "3.8"
          pypi_token: ${{ secrets.PYPI_TOKEN }}
          ignore_dev_requirements: "yes"

  docker:
    runs-on: ubuntu-latest
    needs: release
    timeout-minutes: 300
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Get package version
        run: echo "PACKAGE_VERSION=$(poetry version -s)" >> $GITHUB_ENV

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2.8.0
        with:
          context: .
          push: true
          tags: octue/octue-sdk-python:${{ env.PACKAGE_VERSION }}-slim,octue/octue-sdk-python:latest
